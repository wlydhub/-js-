/**
 * 题目
 * 给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，
 * 并且这些子字符串中的所有0和所有1都是组合在一起的。
 * 重复出现的子串要计算它们出现的次数。
 * 示例 1 :
 * 输入: "00110011"
 * 输出: 6
 * 解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。
 * 请注意，一些重复出现的子串要计算它们出现的次数。
 * 另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
 * 示例 2 :
 * 输入: "10101"
 * 输出: 4
 * 解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
 * 注意：
 * s.length 在1到50,000之间。
 * s 只包含“0”或“1”字符。
 */


// 思路
// '0011'0011
//  0'01'10011
//  00'1100'11
//  001'10'011
//  0011'0011'
//  00110'01'1

export default (str) => {
  // 建立数据结构，堆栈，用于保存数据
  let arr = [];

  // 确定检查方法
  const match = (s) => {
    // 得到连续的0或1;
    const s1 = s.match(/^(0+|1+)/)[0];
    // s1取反,然后复制和s1对应的位数
    const s2 = (s1[0] ^ 1).toString().repeat(s1.length);
    const reg = new RegExp(`^(${s1}${s2})`);
    if(reg.test(s)){
      return RegExp.$1;
    } 
    return '';
  }
  
  for(let i = 0; i < str.length - 1; i ++){
    let sub = match(str.slice(i));
    if(sub){
      arr.push(sub);
    }
  }
  return arr
}

/**
* 思路总结
* 算法是什么呢？算法的本质就是寻找规律并实现
* 如何寻找到呢？根据输入和输出，寻找关联或突破点
* 如何实现呢？if else for ··· + 数据结构
*/
/**
 * 方法总结
 * str.slice() -> 摘取一个字符串区域，返回一个新的字符串。
 * str.match(regexp) -> 方法检索返回一个字符串匹配正则表达式的的结果。
 * str.repeat(count) -> 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。
 */
